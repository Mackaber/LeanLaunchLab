lll.views.ProjectMembersView = Backbone.View.extend({
  
  events: {
    "click .paste": "paste"
  },
  
  template: null,
  
  initialize: function() {
    var self = this;
    
    _.bindAll(self, "destroy", "render", "resetMembers", "renderItem", "addMember", "removeMember", "paste");
    
    self.collection = new (Backbone.Subset.extend({
      parent: function () {
        return lll.models.members;
      },
      sieve: function (member) {
        return (member.get("project_id") == self.model.id) && member.get("active");
      }
    }))();
    self.collection.liveupdate_keys = "all";
    
    self.collection.on("reset", self.resetMembers);
    self.collection.trigger("reset");
    self.collection.on("add", self.addMember);
    self.collection.on("remove", self.removeMember);    
    self.model.on("change", self.render);    
  },
  
  onDestroy: function() {
    var self = this;
    self.collection.off("reset", self.resetMembers);
    self.collection.off("add", self.addMember);
    self.collection.off("remove", self.removeMember);    
    self.model.off("change", self.render);    
  },
  
  resetMembers: function() {
    var self = this;
    self._projectMemberViews = {};
    self.collection.each(self.addMember);
  },

  render: function() {
    var self = this;

    $(self.el).empty();

    $(self.el).append(new lll.views.ProjectHeadingView({
      model: self.model,
      url_attribute: "members_url"
    }).render().el);

    $(self.el).append(new lll.views.AlertView().render().el);
    
    $(self.el).append(new lll.views.ProjectTabsView({
      model: self.model,
      selected: "members"
    }).render().el);
    
    templateLoader.loadRemoteTemplate("<%= asset_path 'v2/ProjectMembers.html' %>", function(data) {
      if (!self.template) {
        self.template = _.template(data);
      }
      
      $(self.el).append(self.template({
        project: self.model,
        organization: self.model.organization()
      }));          
      
      var currentMember = self.model.currentMember();
      
      if (currentMember.get("can_manage_members") && !self.model.organization().get("locked")) {
        var newView = function() {
          var newMember = new lll.models.Member({
            project_id: self.model.id,
          });
          var newMemberView = new lll.views.NewProjectMemberView({
            model: newMember,
            levels: self.options.levels,
            roles: self.options.roles,
            create: function(model) {
              $(newMemberView.el).remove();
              newView();
              lll.views.info("Email confirmation sent to " + model.get("user").email);
            }
          });     
          self.$(".member-area").prepend(newMemberView.render().el);                      
        };
        
        newView();
        
        self.pasteView = new lll.views.PasteProjectMembersView({
          model: self.model
        });
        $(self.pasteView.render().el).hide();
        self.$(".member-area").append(self.pasteView.el);
      }
      
      self.collection.each(function(member) {
        var view = self._projectMemberViews[member.cid];
        view.model.trigger("change");
        self.renderItem(view);
      });

      $(self.el).data("view", self);
      self._rendered = true;
    });
    
    return self;
  },
  
  renderItem: function(view) {
    var self = this;
    var first = _.find(
      self.$(".member-area .member-listing"),
      function(e) { 
        return (lll.models.members.comparator($(e).data("model")) >= lll.models.members.comparator(view.model));
      }
    );
    if (first == view.el) {
      return;
    }    
    if (first) {
      $(first).before(view.el);
    }
    else {
      self.$(".member-area").append(view.el);
    }                      
    if (view.model.isNew()) { 
      setTimeout(function() {
        $(view.el).effect("highlight", "slow");
      }, 0);
    }
    view.delegateEvents();
  },
  
  addMember: function(model) {
    var self = this;
    var v = new lll.views.ProjectMemberView({
      model: model,
      levels: self.options.levels,
      roles: self.options.roles,
      update: function(model) {
        lll.views.info("Member record saved");
      }
    });
    self._projectMemberViews[model.cid] = v;
    
    var previousItem = $("#" + model.get("type") + "_" + model.id);
    if (self._rendered) {
      v.model.trigger("change");
      self.renderItem(v);  
    }
    if (previousItem.length > 0) {
      // workaround for the fact that jquery sortable ALSO moves the DOM element
      previousItem.remove();
    }
    self.$(".member-count").text(self.collection.length);    
  },

  removeMember: function(model) {
    var self = this;
    var v = self._projectMemberViews[model.cid];
    delete self._projectMemberViews[model.cid];
    v.destroy();    
    self.$(".member-count").text(self.collection.length);
  },
  
  paste: function() {
    var self = this;
    if (!self.model.organization().get("can_add_member")) {
      new lll.views.UpgradeSubscriptionView({
        model: self.model.organization()
      }).render();
      return false;
    }
    $(self.pasteView.el).slideDown();
    return false;
  }

});